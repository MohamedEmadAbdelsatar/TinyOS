/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package os_gui1;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.PopupMenu;
import java.awt.Toolkit;
import java.io.File;
import javax.activation.FileDataSource;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author engma
 */
public class OSFiles extends javax.swing.JFrame implements TreeSelectionListener{

    /**
     * Creates new form OSFiles
     */
    public OSFiles() {
        initComponents();
        this.setAlwaysOnTop(true);
                FileTree.addTreeSelectionListener(this);
                FileTree.setCellRenderer(new MyTreeCellRenderer());
                setDefaultCloseOperation(process_scheduling.DISPOSE_ON_CLOSE);
                Toolkit toolkit = getToolkit();
                Dimension size = toolkit.getScreenSize();
                setLocation(size.width/2 - getWidth()/2, 
		size.height/2 - getHeight()/2);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FileTree = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        DirectoryName = new javax.swing.JTextField();
        IMessage = new javax.swing.JLabel();
        Delete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        FileTree.setFont(new java.awt.Font("Oswald", 0, 14)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        FileTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        FileTree.setEditable(true);
        jScrollPane1.setViewportView(FileTree);

        jLabel2.setFont(new java.awt.Font("Oswald", 0, 18)); // NOI18N
        jLabel2.setText("Add a new Directory :");

        jButton2.setFont(new java.awt.Font("Oswald", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 114, 6));
        jButton2.setText("+ add file");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        DirectoryName.setFont(new java.awt.Font("Oswald", 0, 12)); // NOI18N
        DirectoryName.setToolTipText("");
        DirectoryName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectoryNameActionPerformed(evt);
            }
        });

        IMessage.setBackground(new java.awt.Color(245, 245, 245));
        IMessage.setFont(new java.awt.Font("Oswald", 0, 11)); // NOI18N
        IMessage.setForeground(new java.awt.Color(255, 0, 0));

        Delete.setFont(new java.awt.Font("Oswald", 0, 14)); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Oswald", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Oswald", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 114, 6));
        jButton1.setText("+ add folder");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Oswald", 0, 14)); // NOI18N
        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Oswald", 0, 18)); // NOI18N
        jLabel1.setText("Text editor:");

        jLabel3.setFont(new java.awt.Font("Oswald", 0, 18)); // NOI18N
        jLabel3.setText("Select a file or folder to delete :");

        jLabel4.setFont(new java.awt.Font("Oswald", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DirectoryName)
                        .addGap(131, 131, 131))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(Delete))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(jButton1))
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(237, 237, 237))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DirectoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Delete)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(IMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTreeModel treeModel = (DefaultTreeModel) FileTree.getModel(); 
                FileData newFileData = new FileData(false, DirectoryName.getText()+".txt","");
//                newFileData.setData(jTextArea1.getText());
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) FileTree.getLastSelectedPathComponent();
       boolean t = true  ; 
        
        try{
            
        FileData sn = (FileData)selectedNode.getUserObject();
        t = sn.getFolderType(); 
        }
        catch(Exception ed)
        {
            t = true; 
            
        }
        
        if(t)
        {           
        
        DefaultMutableTreeNode newFile = new DefaultMutableTreeNode(newFileData);
        //category.add
        
        
//        System.out.println(newFileData.Data);
        
        
        if(selectedNode!=null)
        {
        if(!DirectoryName.getText().trim().equals(""))
        {
            jTextArea1.show();
            treeModel.insertNodeInto(newFile, selectedNode, selectedNode.getChildCount());
            
            treeModel.reload();
            DirectoryName.setText("");
            IMessage.setForeground(Color.decode("#007206"));
             IMessage.setText("File added");
        }
        else {
            IMessage.setForeground(Color.red);
            IMessage.setText("you must enter a vaild name");
            
        }}
        else {
            IMessage.setForeground(Color.red);
            IMessage.setText("you must choose a directory");
            
        }
        
//        jTextArea1.setText(newFileData.Data);
        }
        else {
            IMessage.setForeground(Color.red);
            IMessage.setText("it is not a directory");
          
        }
        
        
        

    }//GEN-LAST:event_jButton2ActionPerformed

    private void DirectoryNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectoryNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DirectoryNameActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
         DefaultTreeModel treeModel = (DefaultTreeModel) FileTree.getModel(); 
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) FileTree.getLastSelectedPathComponent();
        if(selectedNode.isRoot())
        {
            IMessage.setForeground(Color.red);
            IMessage.setText("you can not delete the root");
            
        }
        else{
            if(selectedNode!=null)
            {
                treeModel.removeNodeFromParent(selectedNode);
            }
            else 
            {
                IMessage.setForeground(Color.red);
              IMessage.setText("you must choose a directory");
            


            }
        }


    }//GEN-LAST:event_DeleteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTreeModel treeModel = (DefaultTreeModel) FileTree.getModel(); 
        FileData newFileData = new FileData(true, DirectoryName.getText(),"");
        
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) FileTree.getLastSelectedPathComponent();
        DefaultMutableTreeNode newFile = new DefaultMutableTreeNode(newFileData.name);
        DefaultMutableTreeNode newFile2 = new DefaultMutableTreeNode("..");
         boolean t = true  ; 
        
        try{
            
        FileData sn = (FileData)selectedNode.getUserObject();
        t = sn.getFolderType(); 
        }
        catch(Exception ed)
        {
           
            t = true; 
            
        }
        
        if(t)
        {   
        
        if(selectedNode!=null)
        {
        if(!DirectoryName.getText().trim().equals(""))
        {
            treeModel.insertNodeInto(newFile, selectedNode, selectedNode.getChildCount());
            treeModel.insertNodeInto(newFile2, newFile, newFile.getChildCount());
            
            jTextArea1.hide();
            
            treeModel.reload();
            DirectoryName.setText("");
            IMessage.setForeground(Color.decode("#007206"));
             IMessage.setText("Folder added");
             
             
        }
        else {
            jTextArea1.hide();
            IMessage.setForeground(Color.red);
            IMessage.setText("you must enter a vaild name");
            
        }}
        else {
            jTextArea1.hide();
            IMessage.setForeground(Color.red);
            IMessage.setText("you must choose a directory");
            
        }
        
//        jTextArea1.setText(newFile.getUserObject().toString());
        }
        else {
            IMessage.setForeground(Color.red);
            IMessage.setText("it is not a directory");
                       
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           FileTree.getLastSelectedPathComponent();
                        if (node == null) return;

        FileData fd = new FileData(false , node.getUserObject().toString() , jTextArea1.getText());
        node.setUserObject(fd);
        
        
        IMessage.setForeground(Color.decode("#007206"));
             IMessage.setText("the text is saved");
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OSFiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OSFiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OSFiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OSFiles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OSFiles().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JTextField DirectoryName;
    private javax.swing.JTree FileTree;
    private javax.swing.JLabel IMessage;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
        FileTree.getLastSelectedPathComponent();
        jTextArea1.hide();
        if (node == null) return;
        try{
        Object nodedata = node.getUserObject();
        FileData fd = (FileData) nodedata;
        if(!fd.getFolderType())
            jTextArea1.show();
        jTextArea1.setText(fd.getData());
        }
        catch (Exception ex)
        {
            
        }   

        

    }
    
    
     class FileData {
    
    
    private boolean isfolder; 
    String name ; 
    private String Data; 
    public FileData(boolean isfolder ,String n ,String data)
    {
        this.isfolder = isfolder ; 
        name = n ; 
        Data = data;
        
    }
    
    public void setData(String data)
    {
        this.Data = data;
    }
    public String getData()
    {
        return this.Data;
    }
    
    public boolean getFolderType()
    {
        return isfolder; 
    }
    public String toString()
    {
        return name; 
    }
    
}
    
    private static class MyTreeCellRenderer extends DefaultTreeCellRenderer {

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);

            // decide what icons you want by examining the node
            if (value instanceof DefaultMutableTreeNode) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
                if (node.getUserObject().equals("root")) {
                    // your root node, since you just put a String as a user obj                    
                    setIcon(UIManager.getIcon("FileView.computerIcon"));
                }  if (node.getUserObject()  instanceof FileData) {
                    // decide based on some property of your Contact obj
                    
                    FileData fileData = (FileData)  node.getUserObject();
                    
                    if (!fileData.getFolderType()) {
                        setIcon(UIManager.getIcon("FileView.hardDriveIcon"));
                    }
//                     else   setIcon(UIManager.getIcon("FileChooser.homeFolderIcon"));
                }
            }

            return this;
        }



   
}
}